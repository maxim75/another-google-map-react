{"version":3,"sources":["../../src/GoogleMap.tsx","../../src/GeoJsonLayer.tsx","App.tsx","index.tsx"],"names":["GoogleMapInstance","createContext","isOnClient","window","GoogleMap","props","mapEl","useRef","useState","googleMapInstance","setGoogleMapInstance","useEffect","google","center","load","url","Promise","script","document","map","mapBounds","boundingBox","east","west","south","north","latLng","lat","e","lng","style","ref","value","getKeyFromGeoJson","feature","getKeyFromFeature","GeoJsonLayer","googleMap","useContext","mapData","setMapData","event","mapFeatures","idsToRemove","existingIds","newIds","newFeatures","id","featuresToAdd","getFeaturesToUpdate","key","type","features","JSON","getGeoJson","f","geometry","coordinates","properties","name","getMapFeatureStyleFunc","title","getProperty","App","React","setFeatures","setBoundingBox","setGoogleMap","mapCenter","setMapCenter","mapZoom","setMapZoom","interval","setInterval","prevFeatures","Math","random","floor","length","slice","clearInterval","onClick","stringify","toString","googleMapOptions","zoom","mapTypeId","streetViewControl","border","height","alert","onBoundsChanged","gooleMapLoaderUrl","googleMapRef","onFeatureClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8249f44d.chunk.js","sourcesContent":["import { useEffect, useRef, useState, createContext, useContext } from 'react'\nimport * as React from 'react'\nimport CSS from 'csstype'\nimport { BoundingBox, LatLng } from './Models'\n\nexport const GoogleMapInstance = createContext(null)\nconst isOnClient = typeof window !== 'undefined'\n\nexport function useGoogleMap() {\n  return useContext(GoogleMapInstance)\n}\n\nexport interface GoogleMapProps {\n  style: CSS.Properties\n  googleMapOptions: any\n  gooleMapLoaderUrl: string\n  onBoundsChanged?: (boundingBox: BoundingBox) => void\n  onClick?: (latLng: LatLng, event: any) => void\n  googleMapRef?: (map: any) => void\n  children: any\n}\n\nfunction loadScript(url: string) {\n  if (isOnClient && typeof (window as any).google !== 'undefined') {\n    return Promise.resolve()\n  }\n\n  return new Promise((resolve) => {\n    const script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = url\n    script.onload = resolve\n    document.head.appendChild(script)\n  })\n}\n\nexport const GoogleMap = (props: GoogleMapProps) => {\n  const mapEl = useRef(null)\n\n  var [googleMapInstance, setGoogleMapInstance] = useState<any>(null)\n\n  useEffect(() => {\n    if (!isOnClient) return\n    const google = (window as any).google\n    if (!google) return\n    const center = new google.maps.LatLng(\n      props.googleMapOptions.center.lat,\n      props.googleMapOptions.center.lng\n    )\n    googleMapInstance.panTo(center)\n  }, [props.googleMapOptions.center])\n\n  useEffect(() => {\n    if (!isOnClient) return\n    const google = (window as any).google\n    if (!google) return\n    googleMapInstance.setZoom(props.googleMapOptions.zoom)\n  }, [props.googleMapOptions.zoom])\n\n  useEffect(() => {\n    if (!isOnClient) return\n\n    async function load() {\n      await loadScript(props.gooleMapLoaderUrl)\n      const google = (window as any).google\n      const map = new google.maps.Map(mapEl.current, props.googleMapOptions)\n      setGoogleMapInstance(map)\n      if (props.googleMapRef) {\n        props.googleMapRef(map)\n      }\n\n      map.addListener('bounds_changed', () => {\n        const mapBounds = map.getBounds()\n        const boundingBox = {\n          east: mapBounds.getNorthEast().lng(),\n          west: mapBounds.getSouthWest().lng(),\n          south: mapBounds.getSouthWest().lat(),\n          north: mapBounds.getNorthEast().lat()\n        }\n\n        props.onBoundsChanged && props.onBoundsChanged(boundingBox)\n      })\n      map.addListener('click', (e: any) => {\n        const latLng: LatLng = { lat: e.latLng.lat(), lng: e.latLng.lng() }\n        props.onClick && props.onClick(latLng, e)\n      })\n    }\n    load()\n  }, [])\n\n  return (\n    <div>\n      <div style={props.style} ref={mapEl}></div>\n      <GoogleMapInstance.Provider value={googleMapInstance}>\n        {isOnClient && props.children}\n      </GoogleMapInstance.Provider>\n    </div>\n  )\n}\n","import { useGoogleMap } from \"./GoogleMap\";\nimport { useEffect, useState } from \"react\";\n\ninterface GeoJsonLayerProps {\n  getMapFeatureStyleFunc: any;\n  features: any[];\n  onFeatureClick: (feature: any) => void;\n}\n\nfunction getKeyFromGeoJson(feature: any) {\n  return feature.properties.key;\n}\n\nfunction getKeyFromFeature(feature: any) {\n  return feature.getProperty(\"key\");\n}\n\nfunction getFeaturesToUpdate(mapFeatures: any[], newFeatures: any[]) {\n  const idsToRemove: any[] = [];\n  const existingIds: any[] = [];\n  const newIds: string[] = newFeatures.map((f: any) => getKeyFromGeoJson(f));\n\n  mapFeatures.forEach((feature: any) => {\n    const id = getKeyFromFeature(feature);\n    if (newIds.includes(id)) {\n      existingIds.push(id);\n    } else {\n      idsToRemove.push(id);\n    }\n  });\n\n  const featuresToAdd = newFeatures.filter(\n    (x: any) => !existingIds.includes(getKeyFromGeoJson(x))\n  );\n\n  return { featuresToAdd, idsToRemove };\n}\n\nexport function GeoJsonLayer(props: GeoJsonLayerProps) {\n  var googleMap = useGoogleMap();\n\n  let [mapData, setMapData] = useState<any>(null);\n\n  if ((window as any).google && mapData == null) {\n    mapData = new (window as any).google.maps.Data();\n\n    mapData.addListener(\"click\", function (event: any) {\n      if (props.onFeatureClick) {\n        props.onFeatureClick(event.feature);\n      }\n    });\n\n    setMapData(mapData);\n    mapData.setMap(googleMap);\n    mapData.setStyle(props.getMapFeatureStyleFunc);\n  }\n\n  useEffect(() => {\n    if (!(window as any).google) return;\n\n    const mapFeatures: any[] = [];\n    mapData.forEach((feature: any) => {\n      mapFeatures.push(feature);\n    });\n\n    const { featuresToAdd, idsToRemove } = getFeaturesToUpdate(\n      mapFeatures,\n      props.features\n    );\n\n    mapData.forEach((feature: any) => {\n      const key = getKeyFromFeature(feature);\n      if (idsToRemove.includes(key)) {\n        mapData.remove(feature);\n      }\n    });\n\n    mapData.addGeoJson({\n      type: \"FeatureCollection\",\n      features: featuresToAdd,\n    });\n\n  }, [JSON.stringify(props.features)]);\n\n  return null;\n}\n","import React from 'react'\n\nimport { GoogleMap, GeoJsonLayer } from 'another-google-map-react'\n\nimport 'another-google-map-react/dist/index.css'\n\nconst GOOGLE_MAP_LOADER_URL = `https://maps.googleapis.com/maps/api/js?v=beta&libraries=places`\n\nfunction getGeoJson(features: any[]) {\n  return features.map((f) => {\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [f.lng, f.lat]\n      },\n      properties: {\n        name: 'test',\n        id: f.id,\n        key: f.id\n      }\n    }\n  })\n}\n\nfunction getMapFeatureStyleFunc(feature: any) {\n  return {\n    title: feature.getProperty('id')\n  }\n}\n\nconst App = () => {\n  const [features, setFeatures] = React.useState<any[]>([])\n  const [boundingBox, setBoundingBox] = React.useState<any>(null)\n  const [googleMap, setGoogleMap] = React.useState<any>(null)\n  const [mapCenter, setMapCenter] = React.useState<any>({ lat: -34, lng: 151 })\n  const [mapZoom, setMapZoom] = React.useState<number>(10)\n\n  const add = () => {\n    setFeatures((prevFeatures) => [\n      ...prevFeatures,\n      {\n        lat: -34 + Math.random() - 0.5,\n        lng: 151 + Math.random() - 0.5,\n        id: Math.floor(Math.random() * 100000000)\n      }\n    ])\n\n    setFeatures((prevFeatures) =>\n      prevFeatures.length > 100 ? prevFeatures.slice(1) : prevFeatures\n    )\n  }\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      add()\n    }, 500)\n    return () => clearInterval(interval)\n  }, [])\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setMapCenter({ lat: -34, lng: 151 })\n          setMapZoom(10)\n        }}\n      >\n        Sydney\n      </button>\n      <button\n        onClick={() => {\n          setMapCenter({ lat: 50.4, lng: 30.4 })\n          setMapZoom(12)\n        }}\n      >\n        Kyiv\n      </button>\n      <div>\n        {JSON.stringify(boundingBox)} Google Map ref:{' '}\n        {(googleMap !== null).toString()}\n      </div>\n      <GoogleMap\n        googleMapOptions={{\n          center: mapCenter,\n          zoom: mapZoom,\n          mapTypeId: 'roadmap',\n          streetViewControl: false\n        }}\n        style={{ border: 'solid 1px Black', height: 'calc(100vh - 200px)' }}\n        onClick={(latLng) => alert(JSON.stringify(latLng))}\n        onBoundsChanged={(boundingBox) => setBoundingBox(boundingBox)}\n        gooleMapLoaderUrl={GOOGLE_MAP_LOADER_URL}\n        googleMapRef={(map) => setGoogleMap(map)}\n      >\n        <GeoJsonLayer\n          features={getGeoJson(features)}\n          onFeatureClick={(feature) => {\n            alert(`Feature ID=${feature.getProperty('id')} clicked`)\n          }}\n          getMapFeatureStyleFunc={getMapFeatureStyleFunc}\n        ></GeoJsonLayer>\n      </GoogleMap>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}